"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../../util");
var kernel_registry = require("./kernel_registry");
var tape_1 = require("./tape");
var BackendEngine = (function () {
    function BackendEngine(backend) {
        this.backend = backend;
        this.debugMode = false;
        this.masterTape = new tape_1.Tape(backend);
    }
    BackendEngine.prototype.enableDebugMode = function () {
        this.debugMode = true;
    };
    BackendEngine.prototype.executeKernel = function (kernelName, config, grad) {
        var _this = this;
        var kernelFn = function () {
            return kernel_registry.executeKernel(_this.backend, kernelName, config);
        };
        var start;
        if (this.debugMode) {
            start = performance.now();
        }
        var result = kernelFn();
        if (this.debugMode) {
            var vals = result.getValues();
            var time = util.rightPad(performance.now() - start + "ms", 9);
            var paddedName = util.rightPad(name, 25);
            var rank = result.rank;
            var size = result.size;
            var shape = util.rightPad(result.shape.toString(), 14);
            console.log("%c" + paddedName + "\t%c" + time + "\t%c" + rank + "D " + shape + "\t%c" + size, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange');
            this.checkForNaN(vals, result.dtype, name);
        }
        var evaluatedNode = {
            name: "kernel: " + kernelName,
            kernel: kernelName,
            inputAndArgs: config,
            output: result,
            gradient: grad
        };
        this.masterTape.addEvaluatedKernelNode(evaluatedNode);
        return result;
    };
    BackendEngine.prototype.gradientWrt = function (y, xs) {
        return this.masterTape.gradientWrt(y, xs);
    };
    BackendEngine.prototype.checkForNaN = function (vals, dtype, name) {
        for (var i = 0; i < vals.length; i++) {
            if (util.isValNaN(vals[i], dtype)) {
                throw Error("The result of the last math." + name + " has NaNs.");
            }
        }
    };
    BackendEngine.prototype.getBackend = function () {
        return this.backend;
    };
    return BackendEngine;
}());
exports.BackendEngine = BackendEngine;
