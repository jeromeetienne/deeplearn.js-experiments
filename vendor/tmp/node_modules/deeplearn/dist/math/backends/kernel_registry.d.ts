import { NDArray } from '../ndarray';
import { MathBackend } from './backend';
import { ArgMaxNode, ArgMinNode } from './types/argminmax';
import { BatchNorm2DNode, BatchNorm3DNode } from './types/batchnorm';
import { BinaryNode } from './types/binary';
import { Concat1DNode, Concat2DNode, Concat3DNode, Concat4DNode } from './types/concat';
import { Conv2DDerBiasNode, Conv2DDerFilterNode, Conv2DDerInputNode, Conv2DNode } from './types/conv';
import { EqualNode } from './types/logical';
import { MatMulNode } from './types/matmul';
import { MaxNode, MinNode } from './types/minmax';
import { MultinomialNode } from './types/multinomial';
import { OneHotNode } from './types/onehot';
import { PoolBackpropNode, PoolNode } from './types/pool';
import { PowNode } from './types/pow';
import { ResizeBilinear3DNode } from './types/resize_bilinear';
import { Slice1DNode, Slice2DNode, Slice3DNode, Slice4DNode } from './types/slice';
import { SumNode } from './types/sum';
import { TopKIndicesNode, TopKValuesNode } from './types/topk';
import { ClipNode, LeakyReluNode, StepNode, TileNode, TransposeNode, UnaryNode } from './types/unary';
import { PReLUNode } from './types/prelu';
export declare function executeKernel<K extends keyof KernelConfigRegistry, R extends KernelConfigRegistry[K]['output']>(backend: MathBackend, kernelName: K, config: KernelConfigRegistry[K]['inputAndArgs']): R;
export interface KernelConfigRegistry {
    MatMul: MatMulNode;
    Clone: UnaryNode<NDArray>;
    Slice1D: Slice1DNode;
    Slice2D: Slice2DNode;
    Slice3D: Slice3DNode;
    Slice4D: Slice4DNode;
    Concat1D: Concat1DNode;
    Concat2D: Concat2DNode;
    Concat3D: Concat3DNode;
    Concat4D: Concat4DNode;
    Neg: UnaryNode<NDArray>;
    Add: BinaryNode;
    Sub: BinaryNode;
    Mul: BinaryNode;
    Div: BinaryNode;
    Sum: SumNode<'float32' | 'int32' | 'bool'>;
    ArgMax: ArgMaxNode;
    ArgMin: ArgMinNode;
    Equal: EqualNode;
    TopKValues: TopKValuesNode<'float32' | 'int32' | 'bool', NDArray>;
    TopKIndices: TopKIndicesNode;
    Min: MinNode<'float32' | 'int32' | 'bool'>;
    Max: MaxNode<'float32' | 'int32' | 'bool'>;
    Ceil: UnaryNode<NDArray>;
    Floor: UnaryNode<NDArray>;
    Pow: PowNode<NDArray>;
    Exp: UnaryNode<NDArray>;
    Log: UnaryNode<NDArray>;
    Sqrt: UnaryNode<NDArray>;
    Square: UnaryNode<NDArray>;
    Relu: UnaryNode<NDArray>;
    LeakyRelu: LeakyReluNode<NDArray>;
    PReLU: PReLUNode<NDArray>;
    PReLUDer: PReLUNode<NDArray>;
    Elu: UnaryNode<NDArray>;
    EluDer: UnaryNode<NDArray>;
    Selu: UnaryNode<NDArray>;
    Abs: UnaryNode<NDArray>;
    Sigmoid: UnaryNode<NDArray>;
    Step: StepNode<NDArray>;
    Sin: UnaryNode<NDArray>;
    Cos: UnaryNode<NDArray>;
    Tan: UnaryNode<NDArray>;
    Asin: UnaryNode<NDArray>;
    Acos: UnaryNode<NDArray>;
    Atan: UnaryNode<NDArray>;
    Sinh: UnaryNode<NDArray>;
    Cosh: UnaryNode<NDArray>;
    Tanh: UnaryNode<NDArray>;
    Clip: ClipNode<NDArray>;
    Transpose: TransposeNode<NDArray>;
    Tile: TileNode<NDArray>;
    Conv2D: Conv2DNode;
    Conv2DDerInput: Conv2DDerInputNode;
    Conv2DDerFilter: Conv2DDerFilterNode;
    Conv2DDerBias: Conv2DDerBiasNode;
    DepthwiseConv2D: Conv2DNode;
    MaxPool: PoolNode;
    MaxPoolBackprop: PoolBackpropNode;
    AvgPool: PoolNode;
    MinPool: PoolNode;
    ResizeBilinear3D: ResizeBilinear3DNode;
    BatchNorm3D: BatchNorm3DNode;
    BatchNorm2D: BatchNorm2DNode;
    Multinomial: MultinomialNode;
    OneHot: OneHotNode;
}
