import { DataTypes, NDArray } from '../../ndarray';
import { KernelInputConfig, KernelNode, TapeNodeInputArrays, TapeNodeInputGradientArrays } from '../tape_types';
export interface MinNode<G extends keyof DataTypes> extends KernelNode {
    inputAndArgs: MinInputConfig<G>;
    output: NDArray<G>;
    gradient: (dy: NDArray<G>, y: NDArray<G>) => MinGradientInputArrays<G>;
}
export interface MinInputConfig<G extends keyof DataTypes> extends KernelInputConfig {
    inputs: MinInputArrays<G>;
}
export interface MinInputArrays<G extends keyof DataTypes> extends TapeNodeInputArrays {
    x: NDArray<G>;
}
export interface MinGradientInputArrays<G extends keyof DataTypes> extends TapeNodeInputGradientArrays {
    x: () => NDArray<G>;
}
export interface MaxNode<G extends keyof DataTypes> extends KernelNode {
    inputAndArgs: MaxInputConfig<G>;
    output: NDArray<G>;
    gradient: (dy: NDArray<G>, y: NDArray<G>) => MaxGradientInputArrays<G>;
}
export interface MaxInputConfig<G extends keyof DataTypes> extends KernelInputConfig {
    inputs: MaxInputArrays<G>;
}
export interface MaxInputArrays<G extends keyof DataTypes> extends TapeNodeInputArrays {
    x: NDArray<G>;
}
export interface MaxGradientInputArrays<G extends keyof DataTypes> extends TapeNodeInputGradientArrays {
    x: () => NDArray<G>;
}
